{
	"info": {
		"_postman_id": "9a5aa97f-152c-40ba-bc01-75c66fdfc5ec",
		"name": "gorest.co.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "42790270",
		"_collection_link": "https://www.postman.com/lunar-module-pilot-60010789/workspace/qa-assignment/collection/42790270-9a5aa97f-152c-40ba-bc01-75c66fdfc5ec?action=share&source=collection_link&creator=42790270"
	},
	"item": [
		{
			"name": "Create New user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.collectionVariables.get(\"companyCode\");",
							"const randNumber = pm.variables.replaceIn('{{$randomInt}}');",
							"pm.collectionVariables.set(\"email\", code + randNumber + \"@gmail.com\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"//Store user id ",
							"pm.collectionVariables.set(\"userID\", jsonData.id)",
							"",
							"pm.test(\"Validate Status Code is 201\", function()",
							"{",
							"    try{",
							"        pm.response.to.have.status(201);",
							"",
							"    }",
							"    catch(err)",
							"    {",
							"        if(jsonData.message.includes(\"has already been taken\"))",
							"        {",
							"            cleanupScript(); //can impliment this function",
							"        }",
							"    }",
							"    ",
							"})",
							"",
							"pm.test(\"Validate response have ID property\", function()",
							"{",
							"    pm.expect(jsonData).have.property(\"id\");",
							"})",
							"",
							"pm.test(\"Validate email address is same as request body\", function()",
							"{",
							"    pm.expect(jsonData).to.have.property(\"email\").that.equals(pm.collectionVariables.get(\"email\"));",
							"})",
							"",
							"pm.test(\"All response fields are not null\", function () {",
							"    pm.expect(jsonData.id).to.not.be.null;",
							"    pm.expect(jsonData.name).to.not.be.null;",
							"    pm.expect(jsonData.email).to.not.be.null;",
							"    pm.expect(jsonData.gender).to.not.be.null;",
							"    pm.expect(jsonData.status).to.not.be.null;",
							"})",
							"",
							"pm.test(\"Validate response time is less than 2000 ms\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"})",
							"",
							"pm.test(\"Validate JSON response schema\", function()",
							"{",
							"    const schema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"email\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"gender\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"status\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\",",
							"    \"email\",",
							"    \"gender\",",
							"    \"status\"",
							"  ]",
							"}",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Sara\",\n \"gender\":\"female\",\n\"email\":\"{{email}}\",\n\"status\":\"active\"}"
				},
				"url": "{{baseUrl}}/public/v2/users"
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate Status Code is 200\", function()",
							"{",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"",
							"pm.test(\"Validate response previously created user ID\", function()",
							"{",
							"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"userID\"))",
							"",
							"})",
							"",
							"pm.test(\"Validate response previously created user data\", function()",
							"{",
							"    pm.expect(jsonData[0].name).to.eql(\"Sara\")",
							"    pm.expect(jsonData[0].email).to.eql(pm.collectionVariables.get(\"email\"))",
							"    pm.expect(jsonData[0].gender).to.eql(\"female\")",
							"    pm.expect(jsonData[0].status).to.eql(\"active\")",
							"})",
							"",
							"pm.test(\"Validate response array is not empty\", function()",
							"{",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty",
							"})",
							"",
							"pm.test(\"Validate response time is less than 1000 ms\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"",
							"pm.test(\"Validate JSON response schema\", function()",
							"{",
							"    const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"email\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"gender\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"id\",",
							"        \"name\",",
							"        \"email\",",
							"        \"gender\",",
							"        \"status\"",
							"      ]",
							"    }",
							"  ]",
							"};",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{vault:bearer-token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{baseUrl}}/public/v2/users"
			},
			"response": []
		},
		{
			"name": "Create New Post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"//Store user id ",
							"pm.collectionVariables.set(\"postID\", jsonData.id)",
							"",
							"pm.test(\"Validate Status Code is 201\", function()",
							"{",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test(\"Validate response have ID property\", function()",
							"{",
							"    pm.expect(jsonData).have.property(\"id\");",
							"})",
							"",
							"pm.test(\"Validate response previously created user data\", function()",
							"{",
							"    pm.expect(jsonData.title).to.eql(\"Priviliee Assessmnt\")",
							"    pm.expect(jsonData.body).to.eql(\"Qa assessment postman by Sara.\")",
							"})",
							"",
							"pm.test(\"Validate user_id is same as request body\", function()",
							"{",
							"    pm.expect(jsonData).to.have.property(\"user_id\").that.equals(pm.collectionVariables.get(\"userID\"));",
							"})",
							"",
							"pm.test(\"Validate response time is less than 1000 ms\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"pm.test(\"All response fields are not null\", function () {",
							"    pm.expect(jsonData.id).to.not.be.null;",
							"    pm.expect(jsonData.user_id).to.not.be.null;",
							"    pm.expect(jsonData.title).to.not.be.null;",
							"    pm.expect(jsonData.body).to.not.be.null;",
							"})",
							"",
							"pm.test(\"Validate JSON response schema\", function()",
							"{",
							"    const schema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"user_id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"body\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"user_id\",",
							"    \"title\",",
							"    \"body\"",
							"  ]",
							"}",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": \"{{userID}}\",\n    \"title\": \"Priviliee Assessmnt\",\n    \"body\": \"Qa assessment postman by Sara.\"\n}"
				},
				"url": "{{baseUrl}}/public/v2/posts"
			},
			"response": []
		},
		{
			"name": "Get Posts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate Status Code is 200\", function()",
							"{",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"",
							"pm.test(\"Validate response previously created post ID\", function()",
							"{",
							"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"postID\"))",
							"",
							"})",
							"",
							"pm.test(\"Validate response array is not empty\", function()",
							"{",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty",
							"})",
							"",
							"",
							"pm.test(\"Validate response time is less than 1000 ms\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"",
							"pm.test(\"Validate JSON response schema\", function()",
							"{",
							"    const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"user_id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"body\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"id\",",
							"        \"user_id\",",
							"        \"title\",",
							"        \"body\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{baseUrl}}/public/v2/posts"
			},
			"response": []
		},
		{
			"name": "Create New Post By UserID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"//Store user id ",
							"pm.collectionVariables.set(\"postID\", jsonData.id)",
							"",
							"pm.test(\"Validate Status Code is 201\", function()",
							"{",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test(\"Validate response have ID property\", function()",
							"{",
							"    pm.expect(jsonData).have.property(\"id\");",
							"})",
							"",
							"pm.test(\"Validate user_id is same as request body\", function()",
							"{",
							"    pm.expect(jsonData).to.have.property(\"user_id\").that.equals(pm.collectionVariables.get(\"userID\"));",
							"})",
							"",
							"pm.test(\"Validate response time is less than 1000 ms\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"pm.test(\"All response fields are not null\", function () {",
							"    pm.expect(jsonData.id).to.not.be.null;",
							"    pm.expect(jsonData.user_id).to.not.be.null;",
							"    pm.expect(jsonData.title).to.not.be.null;",
							"    pm.expect(jsonData.body).to.not.be.null;",
							"})",
							"",
							"pm.test(\"Validate JSON response schema\", function()",
							"{",
							"    const schema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"user_id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"body\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"user_id\",",
							"    \"title\",",
							"    \"body\"",
							"  ]",
							"}",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": \"{{userID}}\",\n    \"title\": \"Create post ID.\",\n    \"body\": \"Test create post by user id .\"\n  }"
				},
				"url": "{{baseUrl}}/public/v2/users/{{userID}}/posts"
			},
			"response": []
		},
		{
			"name": "Get Post By UserID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate Status Code is 200\", function()",
							"{",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"",
							"pm.test(\"Validate response previously created user ID\", function()",
							"{",
							"    pm.expect(jsonData[0].user_id).to.eql(pm.collectionVariables.get(\"userID\"))",
							"",
							"})",
							"",
							"pm.test(\"Validate response data\", function()",
							"{",
							"    pm.expect(jsonData[0].title).to.eql(\"Create post ID.\");",
							"    pm.expect(jsonData[0].body).to.eql(\"Test create post by user id .\");",
							"})",
							"",
							"pm.test(\"Validate response array is not empty\", function()",
							"{",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty",
							"})",
							"",
							"",
							"pm.test(\"Validate response time is less than 1000 ms\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"",
							"pm.test(\"Validate JSON response schema\", function()",
							"{",
							"    const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"user_id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"body\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"id\",",
							"        \"user_id\",",
							"        \"title\",",
							"        \"body\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{baseUrl}}/public/v2/users/{{userID}}/posts"
			},
			"response": []
		},
		{
			"name": "Get Todo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Validate Status Code is 200\", function()",
							"{",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Verify todos contain non-empty fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.forEach(function (todo) {",
							"        pm.expect(todo.id).to.not.be.null;",
							"        pm.expect(todo.title).to.not.be.empty;",
							"        pm.expect(todo.due_on).to.not.be.empty;",
							"        pm.expect(todo.status).to.not.be.empty;",
							"    });",
							"});",
							"",
							"pm.test(\"Validate status is either pending or completed\", function() {",
							"    jsonData.forEach(function(item) {",
							"        pm.expect([\"pending\", \"completed\"]).to.include(item.status, `Invalid status: ${item.status}`);",
							"    })",
							"})",
							"",
							"pm.test(\"Validate response array is not empty\", function()",
							"{",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty",
							"})",
							"",
							"",
							"pm.test(\"Validate response time is less than 1000 ms\", function()",
							"{",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"",
							"pm.test(\"Validate JSON response schema\", function()",
							"{",
							"    const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"user_id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"due_on\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"id\",",
							"        \"user_id\",",
							"        \"title\",",
							"        \"due_on\",",
							"        \"status\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "{{baseUrl}}/public/v2/todos"
			},
			"response": []
		},
		{
			"name": "Create New user Unauthorized",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.globals.get(\"companyCode\");",
							"const randNumber = pm.variables.replaceIn('{{$randomInt}}');",
							"pm.collectionVariables.set(\"email\", code + randNumber + \"@gmail.com\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate Status Code is 401\", function()",
							"{",
							"        pm.response.to.have.status(401);",
							"})",
							"",
							"pm.test(\"Validate response message\", function()",
							"{",
							"    pm.expect(jsonData.message).to.eql(\"Authentication failed\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Sara\",\n \"gender\":\"male\",\n\"email\":\"ab@d.com\",\n\"status\":\"active\"}"
				},
				"url": "{{baseUrl}}/public/v2/users"
			},
			"response": []
		},
		{
			"name": "Create New user with missing data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.globals.get(\"companyCode\");",
							"const randNumber = pm.variables.replaceIn('{{$randomInt}}');",
							"pm.collectionVariables.set(\"email\", code + randNumber + \"@gmail.com\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate Status Code is 422\", function()",
							"{",
							"        pm.response.to.have.status(422);",
							"})",
							"",
							"pm.test(\"Validate response message\", function()",
							"{",
							"pm.expect(jsonData[0].message).to.contains(\"can't be blank\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:authorization-secret}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Sara\",\n\"email\":\"{{email}}\",\n\"status\":\"active\"}"
				},
				"url": "{{baseUrl}}/public/v2/users"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "postID",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://gorest.co.in"
		},
		{
			"key": "companyCode",
			"value": "PrivilieeUser"
		},
		{
			"key": "vault:authorization-secret",
			"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
		},
		{
			"key": "vault:bearer-token",
			"value": "de2a2584cc1afa5c03045d35cefc0d9887a8f4e5c85b625f683ce8c918cbc0a2"
		}
	]
}